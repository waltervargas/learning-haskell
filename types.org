#+TITLE: Haskell Types
#+OPTIONS: toc:nil num:nil

* Int

#+BEGIN_SRC haskell :exports both
factorial' :: Int -> Int
factorial' n = product [1..n]

factorial' 50
#+END_SRC

#+RESULTS:
: 3.0414093201713376e+64


* Integer

#+BEGIN_SRC haskell :session factorial :exports both :results value code
factorial' :: Integer -> Integer
factorial' n = product [1..n]

factorial' 50
#+END_SRC

#+RESULTS:
#+begin_src haskell
Prelude> Prelude> 30414093201713378043612608166064768844377641568960512000000000000
#+end_src

#+BEGIN_SRC haskell :session factorial :exports both :results value code
:t factorial'
#+END_SRC

#+RESULTS:
#+begin_src haskell
factorial' :: (Num a, Enum a) => a -> a
#+end_src


* Float
Float is real floating point with single precision

#+BEGIN_SRC haskell :exports both
circumference :: Float -> Float
circumference r = 2 * pi * r

circumference 4.0

#+END_SRC

#+RESULTS:
: 25.132741228718345

* Double
is a real floating point with double the precision!

#+BEGIN_SRC haskell :exports both
circumference :: Double -> Double
circumference r = 2 * pi * r

circumference 4.0
#+END_SRC

#+RESULTS:
: 25.132741228718345

* Type variables (a, b)
Because the =head= function takes a list of any type and returns the first
element, so whay could it be his type?

#+BEGIN_SRC haskell :exports both
:t head
#+END_SRC

#+RESULTS:
: head :: [a] -> a

Types are written in capital case, so =a= cannot be a type, it's a type
variable. That means that =a= can be any type. This is much like generics in
other languages, only in Haskell it's much more powerful because it allows us to
easily write very general functions if the don't use any specific behaviour of
the types in them.

Functions that have type variables are called *polymorphic functions*. The type
declaration of =head= states that it takes a list of any type and returns one
element of that type.

Although type variables can have names longer than one character, we usually
give them names of a,b,c,d ...

The =fst= function returns the first component of a pair.

#+BEGIN_SRC haskell :exports both
:t fst
#+END_SRC

#+RESULTS:
: fst :: (a, b) -> a

We can see that ~fst~ takes a touple which contains two types and returns an
elemment which is of the same type as the pair's first component. That's why we
can use ~fst~ on a pair that contains any two types.

Note that just because ~a~ and ~b~ are different type variables, they don't have
to be different types. It just states that the first component's type and the
return type are the same.

* Typeclasses 101

A typeclass is a sort of interface that defines some behaviour. If a type is a
part of a typeclass, that means that it supports and implements the behaviour
the typeclass describes.

Typeclasses are not like Java classes, they are more similar to Java interfaces
but even better.

For example, let's explore the signature of the ~(==)~ function:

#+BEGIN_SRC haskell :exports both
:t (==)
#+END_SRC

#+RESULTS:
: (==) :: Eq a => a -> a -> Bool

Everything before the simbol ~=>~ is called a class constraint. We can read the
previous type declaration like this: the equality function takes any two values
that are of the same type and returns a ~Bool~. The type of those values must be
a member of the ~Eq~ class (this is the class constraint).

The ~Eq~ typeclass provides an interface for testing for equality. Any type
where it makes sense to test for equiality between two values of that type shuld
be a member of the ~Eq~ class. All standard Haskell types except for IO (the
type for dealing with input and output) and functions are part of the ~Eq~
typeclass.

** Some basic typeclasses
*** Eq
Is used for types that support equality testing. The functions its members
implements are ~==~ and ~/=~. So, if there is an ~Eq~ class constraint for a
type variable in a function, the function uses ~==~ or ~/=~ somewhere inside the
functiion definition.

#+BEGIN_SRC haskell :exports both
:t (==)
#+END_SRC

#+RESULTS:
: (==) :: Eq a => a -> a -> Bool

#+BEGIN_SRC haskell :exports both
:t (/=)
#+END_SRC

#+RESULTS:
: (/=) :: Eq a => a -> a -> Bool

#+BEGIN_SRC haskell :exports both :session isTheHeadNumber3
isTheHeadNumber3 :: (Eq a, Num a) => [a] -> Bool
isTheHeadNumber3 (x:_) = x == 3

isTheHeadNumber3 [3,4,5,6]
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC haskell :exports both :session isTheHeadNumber3
:t isTheHeadNumber3
#+END_SRC

#+RESULTS:
: isTheHeadNumber3 :: (Eq a, Num a) => [a] -> Bool

*** Ord
#+BEGIN_QUOTE
To be a member of ~Ord~, a type must first be a member of ~Eq~.
#+END_QUOTE

For types that have ordering, ~Ord~ covers all the standard comparing functions
such as ~<~, ~>~, ~>=~ and ~<=~. The ~compare~ function takes two ~Ord~ class
members of the same type and returns and ordering. =Ordering= is a type that can
be ~GT~ (greater than), ~LT~ (lesser than), or ~EQ~ (equal).

#+BEGIN_SRC haskell :exports both
:t compare
#+END_SRC

#+RESULTS:
: compare :: Ord a => a -> a -> Ordering

#+BEGIN_SRC haskell :exports both
compare 5 5
#+END_SRC

#+RESULTS:
: EQ

#+BEGIN_SRC haskell :exports both
compare 5 4
#+END_SRC

#+RESULTS:
: GT

#+BEGIN_SRC haskell :exports both
(==) LT $ compare [1,2,3,4] [90]
#+END_SRC

#+RESULTS:
: True

*** Show
Members of ~Show~ can be presented as strings. The most used function that deals
with type class ~Show~ is ~show~.

~show~ takes a value whose type is a member of ~Show~ and returns a string.

#+BEGIN_SRC haskell :exports both
show 3
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC haskell :exports both
show True
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC haskell :exports both
:t show
#+END_SRC

#+RESULTS:
: show :: Show a => a -> String

*** Read
~Read~ is sort of the opposite typeclass of ~Show~. The ~read~ function takes a
string and returns a type which is a member of ~Read~.

#+BEGIN_SRC haskell :exports both
read "True" || False
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC haskell :exports both
read "8.2" + 3.8
#+END_SRC

#+RESULTS:
: 12.0

#+BEGIN_SRC haskell :exports both
read "5" - 2
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC haskell :exports both :results value raw
read "[1,2,3,4,5]" ++ [3,3,4]
#+END_SRC

#+RESULTS:
[1,2,3,4,5,3,3,4]

What happens if we try just to do ~read "4"~?

#+BEGIN_SRC haskell :exports both
read "4"
#+END_SRC

#+RESULTS:
: *** Exception: Prelude.read: no parse

What GHCI is telling us here is that it dosn't know what to return. In the
previous examples we did something with the results of ~read~. In that way GHCI
knows what type is need for the expression. If we used the returned value as a
boolean, it knew it had to return a ~Bool~. For ~read "4"~ GHCI knows that we
want a type of the class ~Read~, just don't know which one we want.

#+BEGIN_SRC haskell :exports both
:t read
#+END_SRC

#+RESULTS:
: read :: Read a => String -> a

It returns a type that is part of ~Read~, but if we don't used it later, there
is no way of knowing which type needs to be returned.

**** Type Annotations
For cases like ~read "4"~ we can use explicit *type annotations*. Type
annotations provides a way of explicitly saying which type should have an
expression. We can use *type annotations* by adding ~::~ at the end of the
expression and then specifiying a type.

#+BEGIN_SRC haskell :exports both
read "5" :: Int
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC haskell :exports both
4 * (read "5" :: Float)

#+END_SRC

#+RESULTS:
: 20.0

#+BEGIN_SRC haskell :exports both :results value raw
read "[1,2,3,4]" :: [Int]
#+END_SRC

#+RESULTS:
[1,2,3,4]

#+BEGIN_SRC haskell :exports both :results value raw
read "(3, 'a')" :: (Int, Char)
#+END_SRC

#+RESULTS:
(3,'a')

Since Haskell is statically typed language, it has to know all the types before
the code is compiled. So we have to tell Haskell "Hey, this expression have this
type, in case you don't know it".

Most expressions are such that the compiler can infer the type. But sometimes,
for an expression like ~read "5"~, the compiler dosn't know whether to return a
value of type ~Int~ or ~Float~.

*** Enum
~Enum~ members are sequentially ordered types, they can be enumerated. The main
advantage is members of ~Enum~ is that we can use them in ranges. Members of
~Enum~ also have defined successors and predecesors, which can be get with the
~succ~ and ~pred~ functions.

Types in this class: ~()~, ~Bool~, ~Char~, ~Ordering~, ~Int~, ~Integer~,
~Float~, and ~Double~.

#+BEGIN_SRC haskell :exports both :results value raw :session bah
['a'..'z']
#+END_SRC

#+RESULTS:
abcdefghijklmnopqrstuvwxyz

#+BEGIN_SRC haskell :exports both :results value raw
[LT .. GT]
#+END_SRC

#+RESULTS:
[LT,EQ,GT]

#+BEGIN_SRC haskell :exports both
succ 'B'
#+END_SRC

#+RESULTS:
: C

*** Bounded
~Bounded~ members have an upper and a lower bound.

#+BEGIN_SRC haskell :exports both
minBound :: Int
#+END_SRC

#+RESULTS:
: -9.223372036854776e+18

#+BEGIN_SRC haskell :exports both
minBound :: Char
#+END_SRC

#+RESULTS:
: \NUL

#+BEGIN_SRC haskell :exports both
minBound :: Bool
#+END_SRC

#+RESULTS:
: False

#+BEGIN_SRC haskell :exports both
maxBound :: Bool
#+END_SRC

#+RESULTS:
: True

~minBound~ and ~maxBound~ are interesting because they have a type of:
~(Bounded a) => a~. In a sense they are polymorphic constants.

All tuples are also part of ~Bounded~ if the components are also in it

#+BEGIN_SRC haskell :exports both :results value raw
maxBound :: (Bool, Int, Char)
#+END_SRC

#+RESULTS:
(True,9223372036854775807,'\1114111')


*** Num
#+BEGIN_QUOTE
To join ~Num~ a type must be already a member of ~Show~ and ~Eq~.
#+END_QUOTE

Num is a numeric typeclass. Its members have the property of being able to act
as numbers.

#+BEGIN_SRC haskell :exports both
:t 20
#+END_SRC

#+RESULTS:
: 20 :: Num p => p

#+BEGIN_SRC haskell :exports both
20 :: Float
#+END_SRC

#+RESULTS:
: 20.0

#+BEGIN_SRC haskell :exports both
20 :: Double
#+END_SRC

#+RESULTS:
: 20.0

#+BEGIN_SRC haskell :exports both
20 :: Integer
#+END_SRC

#+RESULTS:
: 20

If we examine the type of ~(*)~, we will see that it accepts all types of
numbers.

#+BEGIN_SRC haskell :exports both :results value raw
:t (*)
#+END_SRC

#+RESULTS:
(*) :: Num a => a -> a -> a

It takes two numbers of the same type and returns a number or that type. That is
why ~(5 :: Int) * (6 :: Integer)~ will result in a type error whereas
~5 * (6 :: Integer)~ will work just fine and produce an ~Integer~ becase ~5~ act
like an ~Integer~ or an ~Int~.


**** Integral
~Integral~ is also a numeric typeclass. ~Num~ includes all numbers, including
real numbers an integral numbers, ~Integral~ includes only integral (whole)
numbers. In this typeclass are ~Int~ and ~Integer~

**** Floating
~Floating~ includes all floating point numbers, so ~Float~ and ~Double~

A very useful function for dealing with numbers is ~fromIntegral~


#+BEGIN_SRC haskell :exports both
:t fromIntegral
#+END_SRC

#+RESULTS:
: fromIntegral :: (Integral a, Num b) => a -> b
