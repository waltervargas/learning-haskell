#+TITLE: Haskell Types
#+OPTIONS: toc:nil num:nil

* Int

#+BEGIN_SRC haskell :exports both
factorial' :: Int -> Int
factorial' n = product [1..n]

factorial' 50
#+END_SRC

#+RESULTS:
: 3.0414093201713376e+64


* Integer

#+BEGIN_SRC haskell :session factorial :exports both :results value code
factorial' :: Integer -> Integer
factorial' n = product [1..n]

factorial' 50
#+END_SRC

#+RESULTS:
#+begin_src haskell
Prelude> Prelude> 30414093201713378043612608166064768844377641568960512000000000000
#+end_src

#+BEGIN_SRC haskell :session factorial :exports both :results value code
:t factorial'
#+END_SRC

#+RESULTS:
#+begin_src haskell
factorial' :: (Num a, Enum a) => a -> a
#+end_src


* Float
Float is real floating point with single precision

#+BEGIN_SRC haskell :exports both
circumference :: Float -> Float
circumference r = 2 * pi * r

circumference 4.0

#+END_SRC

#+RESULTS:
: 25.132741228718345

* Double
is a real floating point with double the precision!

#+BEGIN_SRC haskell :exports both
circumference :: Double -> Double
circumference r = 2 * pi * r

circumference 4.0
#+END_SRC

#+RESULTS:
: 25.132741228718345

* Type variables (a, b)
Because the =head= function takes a list of any type and returns the first
element, so whay could it be his type?

#+BEGIN_SRC haskell :exports both
:t head
#+END_SRC

#+RESULTS:
: head :: [a] -> a

Types are written in capital case, so =a= cannot be a type, it's a type
variable. That means that =a= can be any type. This is much like generics in
other languages, only in Haskell it's much more powerful because it allows us to
easily write very general functions if the don't use any specific behaviour of
the types in them.

Functions that have type variables are called *polymorphic functions*. The type
declaration of =head= states that it takes a list of any type and returns one
element of that type.

Although type variables can have names longer than one character, we usually
give them names of a,b,c,d ...

The =fst= function returns the first component of a pair.

#+BEGIN_SRC haskell :exports both
:t fst
#+END_SRC

#+RESULTS:
: fst :: (a, b) -> a

We can see that ~fst~ takes a touple which contains two types and returns an
elemment which is of the same type as the pair's first component. That's why we
can use ~fst~ on a pair that contains any two types.

Note that just because ~a~ and ~b~ are different type variables, they don't have
to be different types. It just states that the first component's type and the
return type are the same.

* Typeclasses 101

A typeclass is a sort of interface that defines some behaviour. If a type is a
part of a typeclass, that means that it supports and implements the behaviour
the typeclass describes.

Typeclasses are not like Java classes, they are more similar to Java interfaces
but even better.

For example, let's explore the signature of the ~(==)~ function:

#+BEGIN_SRC haskell :exports both
:t (==)
#+END_SRC

#+RESULTS:
: (==) :: Eq a => a -> a -> Bool

Everything before the simbol ~=>~ is called a class constraint. We can read the
previous type declaration like this: the equality function takes any two values
that are of the same type and returns a ~Bool~. The type of those values must be
a member of the ~Eq~ class (this is the class constraint).

The ~Eq~ typeclass provides an interface for testing for equality. Any type
where it makes sense to test for equiality between two values of that type shuld
be a member of the ~Eq~ class. All standard Haskell types except for IO (the
type for dealing with input and output) and functions are part of the ~Eq~
typeclass.

** Some basic typeclasses
*** Eq
Is used for types that support equality testing. The functions its members
implements are ~==~ and ~/=~. So, if there is an ~Eq~ class constraint for a
type variable in a function, the function uses ~==~ or ~/=~ somewhere inside the
functiion definition.

#+BEGIN_SRC haskell :exports both
:t (==)
#+END_SRC

#+RESULTS:
: (==) :: Eq a => a -> a -> Bool

#+BEGIN_SRC haskell :exports both
:t (/=)
#+END_SRC

#+RESULTS:
: (/=) :: Eq a => a -> a -> Bool

#+BEGIN_SRC haskell :exports both :session isTheHeadNumber3
isTheHeadNumber3 :: (Eq a, Num a) => [a] -> Bool
isTheHeadNumber3 (x:_) = x == 3

isTheHeadNumber3 [3,4,5,6]
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC haskell :exports both :session isTheHeadNumber3
:t isTheHeadNumber3
#+END_SRC

#+RESULTS:
: isTheHeadNumber3 :: (Eq a, Num a) => [a] -> Bool

*** Ord
#+BEGIN_QUOTE
To be a member of ~Ord~, a type must first be a member of ~Eq~.
#+END_QUOTE

For types that have ordering, ~Ord~ covers all the standard comparing functions
such as ~<~, ~>~, ~>=~ and ~<=~. The ~compare~ function takes two ~Ord~ class
members of the same type and returns and ordering. =Ordering= is a type that can
be ~GT~ (greater than), ~LT~ (lesser than), or ~EQ~ (equal).

#+BEGIN_SRC haskell :exports both
:t compare
#+END_SRC

#+RESULTS:
: compare :: Ord a => a -> a -> Ordering

#+BEGIN_SRC haskell :exports both
compare 5 5
#+END_SRC

#+RESULTS:
: EQ

#+BEGIN_SRC haskell :exports both
compare 5 4
#+END_SRC

#+RESULTS:
: GT

#+BEGIN_SRC haskell :exports both
(==) LT $ compare [1,2,3,4] [90]
#+END_SRC

#+RESULTS:
: True


*** Show
*** Read
*** Enum
*** Bounded
*** Num
*** Integral
*** Floating
***
