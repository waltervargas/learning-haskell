#+TITLE: Syntax in Functions
#+OPTIONS: toc:nil num:nil

* Pattern matching
Pattern matching consists of specifiying patterns to which some data should
match and then checking to see if it does and deconstructing the data according
to those patterns.

You can define separate function bodies for different patterns. You can pattern
match on any data type: numbers, characters, list, tuples etc.

#+BEGIN_SRC haskell :exports both
lucky :: (Integral a) => a -> String
lucky 7 = "Lucky number seven!"
lucky x = "Sorry, you're out of luck, pal!"

:t lucky
#+END_SRC

#+RESULTS:
: lucky :: p -> [Char]

#+BEGIN_SRC haskell :exports both
sayMe :: p -> [Char]
sayMe 1 = "One!"
sayMe 2 = "Two!"
sayMe 3 = "Three!"
sayMe 4 = "Four!"
sayMe 5 = "Five!"
sayMe x = "Not between 1 and 5"

sayMe 7
#+END_SRC

#+RESULTS:
: Not between 1 and 5

One of the classic examples that you will frequently found on the internet using
pattern matching and recursion is the ~factorial~ function as follows:

#+BEGIN_SRC haskell :exports both
factorial:: (Integral a) => a -> a
factorial 0 = 1
factorial n = n * factorial (n - 1)
#+END_SRC

Pattern matching can also fail if we define a function like this

#+BEGIN_SRC haskell :exports both
charName :: Char -> String
charName 'a' = "Albert"
charName 'b' = "Broseph"
charName 'c' = "Cecil"
#+END_SRC

And then try to call it with an input that we didn't expect:

#+BEGIN_SRC haskell
ghci> charName 'h' 
"*** Exception: tut.hs:(53,0)-(55,21): Non-exhaustive patterns in function charName
#+END_SRC

** Pattern Matching on Tuples

Let's write a function that takes two vectors in 2D space and adds them
together:

#+BEGIN_SRC haskell :exports both :session patternMatching
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

addVectors (5, 7) (0, 3)
#+END_SRC

#+RESULTS:
: Prelude> (5,10)

#+BEGIN_SRC haskell :exports both :session patternMatching
:t addVectors
#+END_SRC

#+RESULTS:
: addVectors :: (Num a, Num b) => (a, b) -> (a, b) -> (a, b)

We can also write the functions ~fst~ and ~snd~ but for triplets:

#+BEGIN_SRC haskell :exports both :session patternMatching
first  (x, _, _)  = x
second (_, y, _)  = y

first ("walter", "kellen", "victor")
#+END_SRC

#+RESULTS:
: walter

#+BEGIN_SRC haskell :exports both :session patternMatching
second ("walter", "kellen", "victor")
#+END_SRC

#+RESULTS:
: kellen

The ~_~ means the same thing as it does in list comprehensions. It means that we
don't care of that part, so we just write a ~_~.

** Pattern Matching on Lists
List can also be used in pattern matching. You can match with the empty list
~[]~ or any pattern hat involves ~:~ and the empty list.

Since ~[1,2,3]~ is just syntactic sugar for ~1:2:3:[]~, we can use that for
pattern matching.

The pattern ~x:xs~ will bind the head of the list to ~x~ and the rest of the
list (tail) to ~xs~, even if there's only one element, so ~xs~ ends up being an
empty list.

#+BEGIN_QUOTE
The ~x:xs~ pattern is used a lot, specially in recursive functions. But patterns
that have ~:~ in them only match against list of lenght 1 or more.
#+END_QUOTE

If we want to match the fisrt three elements to variables and the rest to
another variable, we can use something like ~x:y:z:zs~. It will only match
against lists that have three elements or more.

Let's implement the ~head'~ function:

#+BEGIN_SRC haskell :exports both :session patternMatching
head' [] = error "Can't call head on an empty list"
head' (x:_) = x
#+END_SRC

We can also implements the ~length~ function using pattern matching and
recursion:

#+BEGIN_SRC haskell :exports both :session patternMatching
length' :: (Num b) => [a] -> b
length' [] = 0
length' (_:xs) = 1 + length' xs
#+END_SRC
* Guards
* Where
* Let
* Case
